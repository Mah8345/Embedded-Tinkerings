
F103_seven_segment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000160  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  0800026c  0800026c  0000126c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000278  08000278  00001280  2**0
                  CONTENTS
  4 .ARM          00000000  08000278  08000278  00001280  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000278  08000280  00001280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000278  08000278  00001278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800027c  0800027c  0000127c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000280  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000280  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000022d  00000000  00000000  000012a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000011d  00000000  00000000  000014d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000050  00000000  00000000  000015f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000032  00000000  00000000  00001648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fe75  00000000  00000000  0000167a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000586  00000000  00000000  000114ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053d80  00000000  00000000  00011a75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000657f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000080  00000000  00000000  00065838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000658b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000254 	.word	0x08000254

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000254 	.word	0x08000254

0800014c <SevenSeg_display_digit>:
#include <stm32f103xb.h>

const uint8_t seven_seg_masks[10] = {0x03, 0x9F, 0x25, 0x0D, 0x99, 0x49, 0x41, 0x1F, 0x01, 0x09};

void SevenSeg_display_digit(uint32_t digit){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (digit < 0 || digit > 9) return;
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	d809      	bhi.n	800016e <SevenSeg_display_digit+0x22>

	GPIOB->BSRR = GPIO_BSRR_BS0;
 800015a:	4b07      	ldr	r3, [pc, #28]	@ (8000178 <SevenSeg_display_digit+0x2c>)
 800015c:	2201      	movs	r2, #1
 800015e:	611a      	str	r2, [r3, #16]
	GPIOA->ODR = seven_seg_masks[digit];
 8000160:	4a06      	ldr	r2, [pc, #24]	@ (800017c <SevenSeg_display_digit+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	4413      	add	r3, r2
 8000166:	781a      	ldrb	r2, [r3, #0]
 8000168:	4b05      	ldr	r3, [pc, #20]	@ (8000180 <SevenSeg_display_digit+0x34>)
 800016a:	60da      	str	r2, [r3, #12]
 800016c:	e000      	b.n	8000170 <SevenSeg_display_digit+0x24>
	if (digit < 0 || digit > 9) return;
 800016e:	bf00      	nop
}
 8000170:	370c      	adds	r7, #12
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	40010c00 	.word	0x40010c00
 800017c:	0800026c 	.word	0x0800026c
 8000180:	40010800 	.word	0x40010800

08000184 <main>:

int main(){
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= (RCC_APB2ENR_IOPAEN | RCC_APB2ENR_IOPBEN);
 8000188:	4b0b      	ldr	r3, [pc, #44]	@ (80001b8 <main+0x34>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a0a      	ldr	r2, [pc, #40]	@ (80001b8 <main+0x34>)
 800018e:	f043 030c 	orr.w	r3, r3, #12
 8000192:	6193      	str	r3, [r2, #24]
	GPIOA->CRL |= (GPIO_CRL_MODE0_1
 8000194:	4b09      	ldr	r3, [pc, #36]	@ (80001bc <main+0x38>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a08      	ldr	r2, [pc, #32]	@ (80001bc <main+0x38>)
 800019a:	f043 3322 	orr.w	r3, r3, #572662306	@ 0x22222222
 800019e:	6013      	str	r3, [r2, #0]
			| GPIO_CRL_MODE4_1
			| GPIO_CRL_MODE5_1
			| GPIO_CRL_MODE6_1
			| GPIO_CRL_MODE7_1
	);
	GPIOB->CRL |= GPIO_CRL_MODE0_1;
 80001a0:	4b07      	ldr	r3, [pc, #28]	@ (80001c0 <main+0x3c>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	4a06      	ldr	r2, [pc, #24]	@ (80001c0 <main+0x3c>)
 80001a6:	f043 0302 	orr.w	r3, r3, #2
 80001aa:	6013      	str	r3, [r2, #0]

	SevenSeg_display_digit(6);
 80001ac:	2006      	movs	r0, #6
 80001ae:	f7ff ffcd 	bl	800014c <SevenSeg_display_digit>
	while (1){
 80001b2:	bf00      	nop
 80001b4:	e7fd      	b.n	80001b2 <main+0x2e>
 80001b6:	bf00      	nop
 80001b8:	40021000 	.word	0x40021000
 80001bc:	40010800 	.word	0x40010800
 80001c0:	40010c00 	.word	0x40010c00

080001c4 <Reset_Handler>:
Reset_Handler:

/* Call the clock system initialization function.*/

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80001c4:	480b      	ldr	r0, [pc, #44]	@ (80001f4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80001c6:	490c      	ldr	r1, [pc, #48]	@ (80001f8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80001c8:	4a0c      	ldr	r2, [pc, #48]	@ (80001fc <LoopFillZerobss+0x16>)
  movs r3, #0
 80001ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80001cc:	e002      	b.n	80001d4 <LoopCopyDataInit>

080001ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80001ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80001d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80001d2:	3304      	adds	r3, #4

080001d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80001d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80001d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80001d8:	d3f9      	bcc.n	80001ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80001da:	4a09      	ldr	r2, [pc, #36]	@ (8000200 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80001dc:	4c09      	ldr	r4, [pc, #36]	@ (8000204 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80001de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80001e0:	e001      	b.n	80001e6 <LoopFillZerobss>

080001e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80001e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80001e4:	3204      	adds	r2, #4

080001e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80001e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80001e8:	d3fb      	bcc.n	80001e2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80001ea:	f000 f80f 	bl	800020c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80001ee:	f7ff ffc9 	bl	8000184 <main>
  bx lr
 80001f2:	4770      	bx	lr
  ldr r0, =_sdata
 80001f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80001f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80001fc:	08000280 	.word	0x08000280
  ldr r2, =_sbss
 8000200:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000204:	2000001c 	.word	0x2000001c

08000208 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000208:	e7fe      	b.n	8000208 <ADC1_2_IRQHandler>
	...

0800020c <__libc_init_array>:
 800020c:	b570      	push	{r4, r5, r6, lr}
 800020e:	2600      	movs	r6, #0
 8000210:	4d0c      	ldr	r5, [pc, #48]	@ (8000244 <__libc_init_array+0x38>)
 8000212:	4c0d      	ldr	r4, [pc, #52]	@ (8000248 <__libc_init_array+0x3c>)
 8000214:	1b64      	subs	r4, r4, r5
 8000216:	10a4      	asrs	r4, r4, #2
 8000218:	42a6      	cmp	r6, r4
 800021a:	d109      	bne.n	8000230 <__libc_init_array+0x24>
 800021c:	f000 f81a 	bl	8000254 <_init>
 8000220:	2600      	movs	r6, #0
 8000222:	4d0a      	ldr	r5, [pc, #40]	@ (800024c <__libc_init_array+0x40>)
 8000224:	4c0a      	ldr	r4, [pc, #40]	@ (8000250 <__libc_init_array+0x44>)
 8000226:	1b64      	subs	r4, r4, r5
 8000228:	10a4      	asrs	r4, r4, #2
 800022a:	42a6      	cmp	r6, r4
 800022c:	d105      	bne.n	800023a <__libc_init_array+0x2e>
 800022e:	bd70      	pop	{r4, r5, r6, pc}
 8000230:	f855 3b04 	ldr.w	r3, [r5], #4
 8000234:	4798      	blx	r3
 8000236:	3601      	adds	r6, #1
 8000238:	e7ee      	b.n	8000218 <__libc_init_array+0xc>
 800023a:	f855 3b04 	ldr.w	r3, [r5], #4
 800023e:	4798      	blx	r3
 8000240:	3601      	adds	r6, #1
 8000242:	e7f2      	b.n	800022a <__libc_init_array+0x1e>
 8000244:	08000278 	.word	0x08000278
 8000248:	08000278 	.word	0x08000278
 800024c:	08000278 	.word	0x08000278
 8000250:	0800027c 	.word	0x0800027c

08000254 <_init>:
 8000254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000256:	bf00      	nop
 8000258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800025a:	bc08      	pop	{r3}
 800025c:	469e      	mov	lr, r3
 800025e:	4770      	bx	lr

08000260 <_fini>:
 8000260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000262:	bf00      	nop
 8000264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000266:	bc08      	pop	{r3}
 8000268:	469e      	mov	lr, r3
 800026a:	4770      	bx	lr
